{"version":3,"sources":["components/weatherForm/WeatherForm.jsx","components/weatherInfo/WeatherInfo.jsx","App.jsx","index.js"],"names":["WeatherForm","getWeather","setCity","setCountry","cities","require","id","className","onSubmit","type","name","placeholder","onChange","e","target","value","autoComplete","autoFocus","required","country","filter","item","code","map","index","WeatherInfo","data","reqError","useState","description","setDescription","useEffect","main","desLC","weather","desUC","charAt","toUpperCase","slice","temp_min","temp_max","humidity","App","city","setData","setReqError","a","preventDefault","apiCity","trim","toLocaleLowerCase","replace","apiCountry","API","axios","url","then","res","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yzRAuCeA,EArCK,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACpCC,EAASC,EAAQ,IAOvB,OACE,qBAAKC,GAAG,eAAeC,UAAU,YAAjC,SACE,uBAAMC,SAAUP,EAAYM,UAAU,MAAtC,UACE,qBAAKA,UAAU,gBAAf,SACE,uBACEE,KAAK,OACLC,KAAK,OACLC,YAAY,OACZC,SAAU,SAACC,GAAD,OAAOX,EAAQW,EAAEC,OAAOC,QAClCC,aAAa,MACbC,WAAS,EACTC,UAAQ,MAGZ,qBAAKX,UAAU,gBAAf,SACE,wBAAQG,KAAK,UAAUE,SApBT,SAACC,GACrB,IAAMM,EAAUf,EAAOgB,QAAO,SAACC,GAAD,OAAUA,EAAKX,OAASG,EAAEC,OAAOC,SAC/DZ,EAAWgB,EAAQ,GAAGG,OAkBhB,SACGlB,EAAOmB,KAAI,SAACF,EAAMG,GAAP,OACV,iCAAqBH,EAAKX,MAAbc,UAInB,qBAAKjB,UAAU,gBAAf,SACE,wBAAQA,UAAU,kBAAlB,iCCgCKkB,G,MA7DK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EACJC,mBAAS,IADL,mBACnCC,EADmC,KACtBC,EADsB,KAW1C,OARAC,qBAAU,WACR,GAAIL,EAAKM,KAAM,CACb,IAAMC,EAAQP,EAAKQ,QAAQ,GAAGL,YACxBM,EAAQF,EAAMG,OAAO,GAAGC,cAAgBJ,EAAMK,MAAM,GAC1DR,EAAeK,MAEhB,CAACT,IAGF,qCACGA,EAAKM,KACJ,sBAAK1B,GAAG,eAAR,UACE,+BACE,iCACE,mBAAGC,UAAU,0BAA6B,OAE3CmB,EAAKhB,QAER,gCACE,gCACE,+BACE,iCACE,mBAAGH,UAAU,4BAA+B,OAFhD,iBAMA,+BACE,uCAAUmB,EAAKM,KAAKO,SAApB,YACA,uCAAUb,EAAKM,KAAKQ,SAApB,kBAGJ,gCACE,+BACE,iCACE,mBAAGjC,UAAU,gBAAmB,OAFpC,cAMA,8BAAImB,EAAKM,KAAKS,SAAd,aAGJ,+BACE,iCACE,mBAAGlC,UAAU,iBAAoB,OAElCsB,QAGH,KACHF,EACC,sBAAMrB,GAAG,gBAAgBC,UAAU,cAAnC,iCAGE,UCdKmC,MAtCf,WAAgB,IAAD,EACWd,mBAAS,IADpB,mBACNe,EADM,KACAzC,EADA,OAEiB0B,mBAAS,MAF1B,mBAENT,EAFM,KAEGhB,EAFH,OAGWyB,mBAAS,IAHpB,mBAGNF,EAHM,KAGAkB,EAHA,OAImBhB,oBAAS,GAJ5B,mBAIND,EAJM,KAIIkB,EAJJ,KAMP5C,EAAU,uCAAG,WAAOY,GAAP,mBAAAiC,EAAA,6DACjBjC,EAAEkC,iBAEIC,EAAUL,EAAKM,OAAOC,oBAAoBC,QAAQ,MAAO,KACzDC,EAAajC,EAAQ+B,oBACrBG,EALW,2DAK+CL,EAL/C,YAK0DI,EAL1D,iEAOXE,IAAM,CACVC,IAAKF,IAEJG,MAAK,SAACC,GACLZ,GAAY,GACZD,EAAQa,EAAI/B,SAEbgC,OAAM,WACLd,EAAQ,IACRC,GAAY,MAhBC,2CAAH,sDAoBhB,OACE,sBAAKtC,UAAU,MAAf,UACE,cAAC,EAAD,CACEN,WAAYA,EACZC,QAASA,EACTC,WAAYA,IAEd,cAAC,EAAD,CAAauB,KAAMA,EAAMC,SAAUA,QCnCzCgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7c21a5a4.chunk.js","sourcesContent":["import \"./WeatherForm.css\";\r\n\r\nconst WeatherForm = ({ getWeather, setCity, setCountry }) => {\r\n  const cities = require(\"../../json/countries.json\");\r\n\r\n  const changeCountry = (e) => {\r\n    const country = cities.filter((item) => item.name === e.target.value);\r\n    setCountry(country[0].code);\r\n  };\r\n\r\n  return (\r\n    <div id=\"weather-form\" className=\"container\">\r\n      <form onSubmit={getWeather} className=\"row\">\r\n        <div className=\"col-md-4 mb-3\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"city\"\r\n            placeholder=\"City\"\r\n            onChange={(e) => setCity(e.target.value)}\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"col-md-4 mb-3\">\r\n          <select name=\"country\" onChange={changeCountry}>\r\n            {cities.map((item, index) => (\r\n              <option key={index}>{item.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"col-md-4 mb-3\">\r\n          <button className=\"btn btn-warning\">Get Weather</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./WeatherInfo.css\";\r\n\r\nconst WeatherInfo = ({ data, reqError }) => {\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (data.main) {\r\n      const desLC = data.weather[0].description;\r\n      const desUC = desLC.charAt(0).toUpperCase() + desLC.slice(1);\r\n      setDescription(desUC);\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      {data.main ? (\r\n        <div id=\"weather-info\">\r\n          <h1>\r\n            <span>\r\n              <i className=\"fas fa-map-marker-alt\"></i>{\" \"}\r\n            </span>\r\n            {data.name}\r\n          </h1>\r\n          <div>\r\n            <div>\r\n              <h3>\r\n                <span>\r\n                  <i className=\"fas fa-temperature-high\"></i>{\" \"}\r\n                </span>\r\n                Temperature\r\n              </h3>\r\n              <ul>\r\n                <li>Min: {data.main.temp_min} °C</li>\r\n                <li>Max: {data.main.temp_max} °C</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <h3>\r\n                <span>\r\n                  <i className=\"fas fa-tint\"></i>{\" \"}\r\n                </span>\r\n                Humidity\r\n              </h3>\r\n              <p>{data.main.humidity}%</p>\r\n            </div>\r\n          </div>\r\n          <h4>\r\n            <span>\r\n              <i className=\"fas fa-cloud\"></i>{\" \"}\r\n            </span>\r\n            {description}\r\n          </h4>\r\n        </div>\r\n      ) : null}\r\n      {reqError ? (\r\n        <span id=\"error-message\" className=\"text-danger\">\r\n          Failed to get data.\r\n        </span>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\nimport WeatherForm from \"./components/weatherForm/WeatherForm\";\nimport WeatherInfo from \"./components/weatherInfo/WeatherInfo\";\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"AF\");\n  const [data, setData] = useState({});\n  const [reqError, setReqError] = useState(false);\n\n  const getWeather = async (e) => {\n    e.preventDefault();\n\n    const apiCity = city.trim().toLocaleLowerCase().replace(/\\s/g, \"+\");\n    const apiCountry = country.toLocaleLowerCase();\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${apiCity},${apiCountry}&appid=aea2566734b1fcc1e246c527e450134b&units=metric`;\n\n    await axios({\n      url: API,\n    })\n      .then((res) => {\n        setReqError(false);\n        setData(res.data);\n      })\n      .catch(() => {\n        setData({});\n        setReqError(true);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <WeatherForm\n        getWeather={getWeather}\n        setCity={setCity}\n        setCountry={setCountry}\n      />\n      <WeatherInfo data={data} reqError={reqError} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}